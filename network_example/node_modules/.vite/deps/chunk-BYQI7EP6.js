import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/graphology-utils/is-graph.js
var require_is_graph = __commonJS({
  "node_modules/graphology-utils/is-graph.js"(exports, module) {
    module.exports = function isGraph(value) {
      return value !== null && typeof value === "object" && typeof value.addUndirectedEdgeWithKey === "function" && typeof value.dropNode === "function" && typeof value.multi === "boolean";
    };
  }
});

// node_modules/sigma/utils/matrices.js
var require_matrices = __commonJS({
  "node_modules/sigma/utils/matrices.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiplyVec2 = exports.multiply = exports.translate = exports.rotate = exports.scale = exports.identity = void 0;
    function identity() {
      return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    exports.identity = identity;
    function scale(m, x, y) {
      m[0] = x;
      m[4] = typeof y === "number" ? y : x;
      return m;
    }
    exports.scale = scale;
    function rotate(m, r) {
      var s = Math.sin(r), c = Math.cos(r);
      m[0] = c;
      m[1] = s;
      m[3] = -s;
      m[4] = c;
      return m;
    }
    exports.rotate = rotate;
    function translate(m, x, y) {
      m[6] = x;
      m[7] = y;
      return m;
    }
    exports.translate = translate;
    function multiply(a, b) {
      var a00 = a[0], a01 = a[1], a02 = a[2];
      var a10 = a[3], a11 = a[4], a12 = a[5];
      var a20 = a[6], a21 = a[7], a22 = a[8];
      var b00 = b[0], b01 = b[1], b02 = b[2];
      var b10 = b[3], b11 = b[4], b12 = b[5];
      var b20 = b[6], b21 = b[7], b22 = b[8];
      a[0] = b00 * a00 + b01 * a10 + b02 * a20;
      a[1] = b00 * a01 + b01 * a11 + b02 * a21;
      a[2] = b00 * a02 + b01 * a12 + b02 * a22;
      a[3] = b10 * a00 + b11 * a10 + b12 * a20;
      a[4] = b10 * a01 + b11 * a11 + b12 * a21;
      a[5] = b10 * a02 + b11 * a12 + b12 * a22;
      a[6] = b20 * a00 + b21 * a10 + b22 * a20;
      a[7] = b20 * a01 + b21 * a11 + b22 * a21;
      a[8] = b20 * a02 + b21 * a12 + b22 * a22;
      return a;
    }
    exports.multiply = multiply;
    function multiplyVec2(a, b, z) {
      if (z === void 0) {
        z = 1;
      }
      var a00 = a[0];
      var a01 = a[1];
      var a10 = a[3];
      var a11 = a[4];
      var a20 = a[6];
      var a21 = a[7];
      var b0 = b.x;
      var b1 = b.y;
      return { x: b0 * a00 + b1 * a10 + a20 * z, y: b0 * a01 + b1 * a11 + a21 * z };
    }
    exports.multiplyVec2 = multiplyVec2;
  }
});

// node_modules/sigma/utils/data.js
var require_data = __commonJS({
  "node_modules/sigma/utils/data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HTML_COLORS = void 0;
    exports.HTML_COLORS = {
      black: "#000000",
      silver: "#C0C0C0",
      gray: "#808080",
      grey: "#808080",
      white: "#FFFFFF",
      maroon: "#800000",
      red: "#FF0000",
      purple: "#800080",
      fuchsia: "#FF00FF",
      green: "#008000",
      lime: "#00FF00",
      olive: "#808000",
      yellow: "#FFFF00",
      navy: "#000080",
      blue: "#0000FF",
      teal: "#008080",
      aqua: "#00FFFF",
      darkblue: "#00008B",
      mediumblue: "#0000CD",
      darkgreen: "#006400",
      darkcyan: "#008B8B",
      deepskyblue: "#00BFFF",
      darkturquoise: "#00CED1",
      mediumspringgreen: "#00FA9A",
      springgreen: "#00FF7F",
      cyan: "#00FFFF",
      midnightblue: "#191970",
      dodgerblue: "#1E90FF",
      lightseagreen: "#20B2AA",
      forestgreen: "#228B22",
      seagreen: "#2E8B57",
      darkslategray: "#2F4F4F",
      darkslategrey: "#2F4F4F",
      limegreen: "#32CD32",
      mediumseagreen: "#3CB371",
      turquoise: "#40E0D0",
      royalblue: "#4169E1",
      steelblue: "#4682B4",
      darkslateblue: "#483D8B",
      mediumturquoise: "#48D1CC",
      indigo: "#4B0082",
      darkolivegreen: "#556B2F",
      cadetblue: "#5F9EA0",
      cornflowerblue: "#6495ED",
      rebeccapurple: "#663399",
      mediumaquamarine: "#66CDAA",
      dimgray: "#696969",
      dimgrey: "#696969",
      slateblue: "#6A5ACD",
      olivedrab: "#6B8E23",
      slategray: "#708090",
      slategrey: "#708090",
      lightslategray: "#778899",
      lightslategrey: "#778899",
      mediumslateblue: "#7B68EE",
      lawngreen: "#7CFC00",
      chartreuse: "#7FFF00",
      aquamarine: "#7FFFD4",
      skyblue: "#87CEEB",
      lightskyblue: "#87CEFA",
      blueviolet: "#8A2BE2",
      darkred: "#8B0000",
      darkmagenta: "#8B008B",
      saddlebrown: "#8B4513",
      darkseagreen: "#8FBC8F",
      lightgreen: "#90EE90",
      mediumpurple: "#9370DB",
      darkviolet: "#9400D3",
      palegreen: "#98FB98",
      darkorchid: "#9932CC",
      yellowgreen: "#9ACD32",
      sienna: "#A0522D",
      brown: "#A52A2A",
      darkgray: "#A9A9A9",
      darkgrey: "#A9A9A9",
      lightblue: "#ADD8E6",
      greenyellow: "#ADFF2F",
      paleturquoise: "#AFEEEE",
      lightsteelblue: "#B0C4DE",
      powderblue: "#B0E0E6",
      firebrick: "#B22222",
      darkgoldenrod: "#B8860B",
      mediumorchid: "#BA55D3",
      rosybrown: "#BC8F8F",
      darkkhaki: "#BDB76B",
      mediumvioletred: "#C71585",
      indianred: "#CD5C5C",
      peru: "#CD853F",
      chocolate: "#D2691E",
      tan: "#D2B48C",
      lightgray: "#D3D3D3",
      lightgrey: "#D3D3D3",
      thistle: "#D8BFD8",
      orchid: "#DA70D6",
      goldenrod: "#DAA520",
      palevioletred: "#DB7093",
      crimson: "#DC143C",
      gainsboro: "#DCDCDC",
      plum: "#DDA0DD",
      burlywood: "#DEB887",
      lightcyan: "#E0FFFF",
      lavender: "#E6E6FA",
      darksalmon: "#E9967A",
      violet: "#EE82EE",
      palegoldenrod: "#EEE8AA",
      lightcoral: "#F08080",
      khaki: "#F0E68C",
      aliceblue: "#F0F8FF",
      honeydew: "#F0FFF0",
      azure: "#F0FFFF",
      sandybrown: "#F4A460",
      wheat: "#F5DEB3",
      beige: "#F5F5DC",
      whitesmoke: "#F5F5F5",
      mintcream: "#F5FFFA",
      ghostwhite: "#F8F8FF",
      salmon: "#FA8072",
      antiquewhite: "#FAEBD7",
      linen: "#FAF0E6",
      lightgoldenrodyellow: "#FAFAD2",
      oldlace: "#FDF5E6",
      magenta: "#FF00FF",
      deeppink: "#FF1493",
      orangered: "#FF4500",
      tomato: "#FF6347",
      hotpink: "#FF69B4",
      coral: "#FF7F50",
      darkorange: "#FF8C00",
      lightsalmon: "#FFA07A",
      orange: "#FFA500",
      lightpink: "#FFB6C1",
      pink: "#FFC0CB",
      gold: "#FFD700",
      peachpuff: "#FFDAB9",
      navajowhite: "#FFDEAD",
      moccasin: "#FFE4B5",
      bisque: "#FFE4C4",
      mistyrose: "#FFE4E1",
      blanchedalmond: "#FFEBCD",
      papayawhip: "#FFEFD5",
      lavenderblush: "#FFF0F5",
      seashell: "#FFF5EE",
      cornsilk: "#FFF8DC",
      lemonchiffon: "#FFFACD",
      floralwhite: "#FFFAF0",
      snow: "#FFFAFA",
      lightyellow: "#FFFFE0",
      ivory: "#FFFFF0"
    };
  }
});

// node_modules/sigma/utils/index.js
var require_utils = __commonJS({
  "node_modules/sigma/utils/index.js"(exports) {
    "use strict";
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateGraph = exports.canUse32BitsIndices = exports.extractPixel = exports.getMatrixImpact = exports.matrixFromCamera = exports.getCorrectionRatio = exports.floatColor = exports.floatArrayColor = exports.parseColor = exports.zIndexOrdering = exports.createNormalizationFunction = exports.graphExtent = exports.getPixelRatio = exports.createElement = exports.cancelFrame = exports.requestFrame = exports.assignDeep = exports.assign = exports.isPlainObject = void 0;
    var is_graph_1 = __importDefault(require_is_graph());
    var matrices_1 = require_matrices();
    var data_1 = require_data();
    function isPlainObject(value) {
      return typeof value === "object" && value !== null && value.constructor === Object;
    }
    exports.isPlainObject = isPlainObject;
    function assign(target) {
      var objects = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
      }
      target = target || {};
      for (var i = 0, l = objects.length; i < l; i++) {
        var o = objects[i];
        if (!o)
          continue;
        Object.assign(target, o);
      }
      return target;
    }
    exports.assign = assign;
    function assignDeep(target) {
      var objects = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
      }
      target = target || {};
      for (var i = 0, l = objects.length; i < l; i++) {
        var o = objects[i];
        if (!o)
          continue;
        for (var k in o) {
          if (isPlainObject(o[k])) {
            target[k] = assignDeep(target[k], o[k]);
          } else {
            target[k] = o[k];
          }
        }
      }
      return target;
    }
    exports.assignDeep = assignDeep;
    exports.requestFrame = typeof requestAnimationFrame !== "undefined" ? function(callback) {
      return requestAnimationFrame(callback);
    } : function(callback) {
      return setTimeout(callback, 0);
    };
    exports.cancelFrame = typeof cancelAnimationFrame !== "undefined" ? function(requestID) {
      return cancelAnimationFrame(requestID);
    } : function(requestID) {
      return clearTimeout(requestID);
    };
    function createElement(tag, style, attributes) {
      var element = document.createElement(tag);
      if (style) {
        for (var k in style) {
          element.style[k] = style[k];
        }
      }
      if (attributes) {
        for (var k in attributes) {
          element.setAttribute(k, attributes[k]);
        }
      }
      return element;
    }
    exports.createElement = createElement;
    function getPixelRatio() {
      if (typeof window.devicePixelRatio !== "undefined")
        return window.devicePixelRatio;
      return 1;
    }
    exports.getPixelRatio = getPixelRatio;
    function graphExtent(graph) {
      if (!graph.order)
        return { x: [0, 1], y: [0, 1] };
      var xMin = Infinity;
      var xMax = -Infinity;
      var yMin = Infinity;
      var yMax = -Infinity;
      graph.forEachNode(function(_, attr) {
        var x = attr.x, y = attr.y;
        if (x < xMin)
          xMin = x;
        if (x > xMax)
          xMax = x;
        if (y < yMin)
          yMin = y;
        if (y > yMax)
          yMax = y;
      });
      return { x: [xMin, xMax], y: [yMin, yMax] };
    }
    exports.graphExtent = graphExtent;
    function createNormalizationFunction(extent) {
      var _a = __read(extent.x, 2), minX = _a[0], maxX = _a[1], _b = __read(extent.y, 2), minY = _b[0], maxY = _b[1];
      var ratio = Math.max(maxX - minX, maxY - minY), dX = (maxX + minX) / 2, dY = (maxY + minY) / 2;
      if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio))
        ratio = 1;
      if (isNaN(dX))
        dX = 0;
      if (isNaN(dY))
        dY = 0;
      var fn = function(data) {
        return {
          x: 0.5 + (data.x - dX) / ratio,
          y: 0.5 + (data.y - dY) / ratio
        };
      };
      fn.applyTo = function(data) {
        data.x = 0.5 + (data.x - dX) / ratio;
        data.y = 0.5 + (data.y - dY) / ratio;
      };
      fn.inverse = function(data) {
        return {
          x: dX + ratio * (data.x - 0.5),
          y: dY + ratio * (data.y - 0.5)
        };
      };
      fn.ratio = ratio;
      return fn;
    }
    exports.createNormalizationFunction = createNormalizationFunction;
    function zIndexOrdering(extent, getter, elements) {
      return elements.sort(function(a, b) {
        var zA = getter(a) || 0, zB = getter(b) || 0;
        if (zA < zB)
          return -1;
        if (zA > zB)
          return 1;
        return 0;
      });
    }
    exports.zIndexOrdering = zIndexOrdering;
    var INT8 = new Int8Array(4);
    var INT32 = new Int32Array(INT8.buffer, 0, 1);
    var FLOAT32 = new Float32Array(INT8.buffer, 0, 1);
    var RGBA_TEST_REGEX = /^\s*rgba?\s*\(/;
    var RGBA_EXTRACT_REGEX = /^\s*rgba?\s*\(\s*([0-9]*)\s*,\s*([0-9]*)\s*,\s*([0-9]*)(?:\s*,\s*(.*)?)?\)\s*$/;
    function parseColor(val) {
      var r = 0;
      var g = 0;
      var b = 0;
      var a = 1;
      if (val[0] === "#") {
        if (val.length === 4) {
          r = parseInt(val.charAt(1) + val.charAt(1), 16);
          g = parseInt(val.charAt(2) + val.charAt(2), 16);
          b = parseInt(val.charAt(3) + val.charAt(3), 16);
        } else {
          r = parseInt(val.charAt(1) + val.charAt(2), 16);
          g = parseInt(val.charAt(3) + val.charAt(4), 16);
          b = parseInt(val.charAt(5) + val.charAt(6), 16);
        }
        if (val.length === 9) {
          a = parseInt(val.charAt(7) + val.charAt(8), 16) / 255;
        }
      } else if (RGBA_TEST_REGEX.test(val)) {
        var match = val.match(RGBA_EXTRACT_REGEX);
        if (match) {
          r = +match[1];
          g = +match[2];
          b = +match[3];
          if (match[4])
            a = +match[4];
        }
      }
      return { r, g, b, a };
    }
    exports.parseColor = parseColor;
    var FLOAT_COLOR_CACHE = {};
    for (htmlColor in data_1.HTML_COLORS) {
      FLOAT_COLOR_CACHE[htmlColor] = floatColor(data_1.HTML_COLORS[htmlColor]);
      FLOAT_COLOR_CACHE[data_1.HTML_COLORS[htmlColor]] = FLOAT_COLOR_CACHE[htmlColor];
    }
    var htmlColor;
    function floatArrayColor(val) {
      val = data_1.HTML_COLORS[val] || val;
      var _a = parseColor(val), r = _a.r, g = _a.g, b = _a.b, a = _a.a;
      return new Float32Array([r / 255, g / 255, b / 255, a]);
    }
    exports.floatArrayColor = floatArrayColor;
    function floatColor(val) {
      if (typeof FLOAT_COLOR_CACHE[val] !== "undefined")
        return FLOAT_COLOR_CACHE[val];
      var parsed = parseColor(val);
      var r = parsed.r, g = parsed.g, b = parsed.b;
      var a = parsed.a;
      a = a * 255 | 0;
      INT32[0] = (a << 24 | b << 16 | g << 8 | r) & 4278190079;
      var color = FLOAT32[0];
      FLOAT_COLOR_CACHE[val] = color;
      return color;
    }
    exports.floatColor = floatColor;
    function getCorrectionRatio(viewportDimensions, graphDimensions) {
      var viewportRatio = viewportDimensions.height / viewportDimensions.width;
      var graphRatio = graphDimensions.height / graphDimensions.width;
      if (viewportRatio < 1 && graphRatio > 1 || viewportRatio > 1 && graphRatio < 1) {
        return 1;
      }
      return Math.min(Math.max(graphRatio, 1 / graphRatio), Math.max(1 / viewportRatio, viewportRatio));
    }
    exports.getCorrectionRatio = getCorrectionRatio;
    function matrixFromCamera(state, viewportDimensions, graphDimensions, padding, inverse) {
      var angle = state.angle, ratio = state.ratio, x = state.x, y = state.y;
      var width = viewportDimensions.width, height = viewportDimensions.height;
      var matrix = (0, matrices_1.identity)();
      var smallestDimension = Math.min(width, height) - 2 * padding;
      var correctionRatio = getCorrectionRatio(viewportDimensions, graphDimensions);
      if (!inverse) {
        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), 2 * (smallestDimension / width) * correctionRatio, 2 * (smallestDimension / height) * correctionRatio));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.rotate)((0, matrices_1.identity)(), -angle));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), 1 / ratio));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.translate)((0, matrices_1.identity)(), -x, -y));
      } else {
        (0, matrices_1.multiply)(matrix, (0, matrices_1.translate)((0, matrices_1.identity)(), x, y));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), ratio));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.rotate)((0, matrices_1.identity)(), angle));
        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), width / smallestDimension / 2 / correctionRatio, height / smallestDimension / 2 / correctionRatio));
      }
      return matrix;
    }
    exports.matrixFromCamera = matrixFromCamera;
    function getMatrixImpact(matrix, cameraState, viewportDimensions) {
      var _a = (0, matrices_1.multiplyVec2)(matrix, { x: Math.cos(cameraState.angle), y: Math.sin(cameraState.angle) }, 0), x = _a.x, y = _a.y;
      return 1 / Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / viewportDimensions.width;
    }
    exports.getMatrixImpact = getMatrixImpact;
    function extractPixel(gl, x, y, array) {
      var data = array || new Uint8Array(4);
      gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);
      return data;
    }
    exports.extractPixel = extractPixel;
    function canUse32BitsIndices(gl) {
      var webgl2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
      return webgl2 || !!gl.getExtension("OES_element_index_uint");
    }
    exports.canUse32BitsIndices = canUse32BitsIndices;
    function validateGraph(graph) {
      if (!(0, is_graph_1.default)(graph))
        throw new Error("Sigma: invalid graph instance.");
      graph.forEachNode(function(key, attributes) {
        if (!Number.isFinite(attributes.x) || !Number.isFinite(attributes.y)) {
          throw new Error("Sigma: Coordinates of node ".concat(key, " are invalid. A node must have a numeric 'x' and 'y' attribute."));
        }
      });
    }
    exports.validateGraph = validateGraph;
  }
});

// node_modules/sigma/utils/easings.js
var require_easings = __commonJS({
  "node_modules/sigma/utils/easings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cubicInOut = exports.cubicOut = exports.cubicIn = exports.quadraticInOut = exports.quadraticOut = exports.quadraticIn = exports.linear = void 0;
    var linear = function(k) {
      return k;
    };
    exports.linear = linear;
    var quadraticIn = function(k) {
      return k * k;
    };
    exports.quadraticIn = quadraticIn;
    var quadraticOut = function(k) {
      return k * (2 - k);
    };
    exports.quadraticOut = quadraticOut;
    var quadraticInOut = function(k) {
      if ((k *= 2) < 1)
        return 0.5 * k * k;
      return -0.5 * (--k * (k - 2) - 1);
    };
    exports.quadraticInOut = quadraticInOut;
    var cubicIn = function(k) {
      return k * k * k;
    };
    exports.cubicIn = cubicIn;
    var cubicOut = function(k) {
      return --k * k * k + 1;
    };
    exports.cubicOut = cubicOut;
    var cubicInOut = function(k) {
      if ((k *= 2) < 1)
        return 0.5 * k * k * k;
      return 0.5 * ((k -= 2) * k * k + 2);
    };
    exports.cubicInOut = cubicInOut;
    var easings = {
      linear: exports.linear,
      quadraticIn: exports.quadraticIn,
      quadraticOut: exports.quadraticOut,
      quadraticInOut: exports.quadraticInOut,
      cubicIn: exports.cubicIn,
      cubicOut: exports.cubicOut,
      cubicInOut: exports.cubicInOut
    };
    exports.default = easings;
  }
});

// node_modules/sigma/utils/animate.js
var require_animate = __commonJS({
  "node_modules/sigma/utils/animate.js"(exports) {
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.animateNodes = exports.ANIMATE_DEFAULTS = void 0;
    var index_1 = require_utils();
    var easings_1 = __importDefault(require_easings());
    exports.ANIMATE_DEFAULTS = {
      easing: "quadraticInOut",
      duration: 150
    };
    function animateNodes(graph, targets, opts, callback) {
      var options = Object.assign({}, exports.ANIMATE_DEFAULTS, opts);
      var easing = typeof options.easing === "function" ? options.easing : easings_1.default[options.easing];
      var start = Date.now();
      var startPositions = {};
      for (var node in targets) {
        var attrs = targets[node];
        startPositions[node] = {};
        for (var k in attrs)
          startPositions[node][k] = graph.getNodeAttribute(node, k);
      }
      var frame = null;
      var step = function() {
        frame = null;
        var p = (Date.now() - start) / options.duration;
        if (p >= 1) {
          for (var node2 in targets) {
            var attrs2 = targets[node2];
            for (var k2 in attrs2)
              graph.setNodeAttribute(node2, k2, attrs2[k2]);
          }
          if (typeof callback === "function")
            callback();
          return;
        }
        p = easing(p);
        for (var node2 in targets) {
          var attrs2 = targets[node2];
          var s = startPositions[node2];
          for (var k2 in attrs2)
            graph.setNodeAttribute(node2, k2, attrs2[k2] * p + s[k2] * (1 - p));
        }
        frame = (0, index_1.requestFrame)(step);
      };
      step();
      return function() {
        if (frame)
          (0, index_1.cancelFrame)(frame);
      };
    }
    exports.animateNodes = animateNodes;
  }
});

export {
  require_matrices,
  require_utils,
  require_easings,
  require_animate
};
//# sourceMappingURL=chunk-BYQI7EP6.js.map
