{
  "version": 3,
  "sources": ["../../graphology-utils/is-graph.js", "../../sigma/utils/matrices.js", "../../sigma/utils/data.js", "../../sigma/utils/index.js", "../../sigma/utils/easings.js", "../../sigma/utils/animate.js"],
  "sourcesContent": ["/**\r\n * Graphology isGraph\r\n * ===================\r\n *\r\n * Very simple function aiming at ensuring the given variable is a\r\n * graphology instance.\r\n */\r\n\r\n/**\r\n * Checking the value is a graphology instance.\r\n *\r\n * @param  {any}     value - Target value.\r\n * @return {boolean}\r\n */\r\nmodule.exports = function isGraph(value) {\r\n  return (\r\n    value !== null &&\r\n    typeof value === 'object' &&\r\n    typeof value.addUndirectedEdgeWithKey === 'function' &&\r\n    typeof value.dropNode === 'function' &&\r\n    typeof value.multi === 'boolean'\r\n  );\r\n};\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.multiplyVec2 = exports.multiply = exports.translate = exports.rotate = exports.scale = exports.identity = void 0;\r\nfunction identity() {\r\n    return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n}\r\nexports.identity = identity;\r\n// TODO: optimize\r\nfunction scale(m, x, y) {\r\n    m[0] = x;\r\n    m[4] = typeof y === \"number\" ? y : x;\r\n    return m;\r\n}\r\nexports.scale = scale;\r\nfunction rotate(m, r) {\r\n    var s = Math.sin(r), c = Math.cos(r);\r\n    m[0] = c;\r\n    m[1] = s;\r\n    m[3] = -s;\r\n    m[4] = c;\r\n    return m;\r\n}\r\nexports.rotate = rotate;\r\nfunction translate(m, x, y) {\r\n    m[6] = x;\r\n    m[7] = y;\r\n    return m;\r\n}\r\nexports.translate = translate;\r\nfunction multiply(a, b) {\r\n    var a00 = a[0], a01 = a[1], a02 = a[2];\r\n    var a10 = a[3], a11 = a[4], a12 = a[5];\r\n    var a20 = a[6], a21 = a[7], a22 = a[8];\r\n    var b00 = b[0], b01 = b[1], b02 = b[2];\r\n    var b10 = b[3], b11 = b[4], b12 = b[5];\r\n    var b20 = b[6], b21 = b[7], b22 = b[8];\r\n    a[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n    a[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n    a[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n    a[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n    a[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n    a[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n    a[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n    a[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n    a[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n    return a;\r\n}\r\nexports.multiply = multiply;\r\nfunction multiplyVec2(a, b, z) {\r\n    if (z === void 0) { z = 1; }\r\n    var a00 = a[0];\r\n    var a01 = a[1];\r\n    var a10 = a[3];\r\n    var a11 = a[4];\r\n    var a20 = a[6];\r\n    var a21 = a[7];\r\n    var b0 = b.x;\r\n    var b1 = b.y;\r\n    return { x: b0 * a00 + b1 * a10 + a20 * z, y: b0 * a01 + b1 * a11 + a21 * z };\r\n}\r\nexports.multiplyVec2 = multiplyVec2;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.HTML_COLORS = void 0;\r\nexports.HTML_COLORS = {\r\n    black: \"#000000\",\r\n    silver: \"#C0C0C0\",\r\n    gray: \"#808080\",\r\n    grey: \"#808080\",\r\n    white: \"#FFFFFF\",\r\n    maroon: \"#800000\",\r\n    red: \"#FF0000\",\r\n    purple: \"#800080\",\r\n    fuchsia: \"#FF00FF\",\r\n    green: \"#008000\",\r\n    lime: \"#00FF00\",\r\n    olive: \"#808000\",\r\n    yellow: \"#FFFF00\",\r\n    navy: \"#000080\",\r\n    blue: \"#0000FF\",\r\n    teal: \"#008080\",\r\n    aqua: \"#00FFFF\",\r\n    darkblue: \"#00008B\",\r\n    mediumblue: \"#0000CD\",\r\n    darkgreen: \"#006400\",\r\n    darkcyan: \"#008B8B\",\r\n    deepskyblue: \"#00BFFF\",\r\n    darkturquoise: \"#00CED1\",\r\n    mediumspringgreen: \"#00FA9A\",\r\n    springgreen: \"#00FF7F\",\r\n    cyan: \"#00FFFF\",\r\n    midnightblue: \"#191970\",\r\n    dodgerblue: \"#1E90FF\",\r\n    lightseagreen: \"#20B2AA\",\r\n    forestgreen: \"#228B22\",\r\n    seagreen: \"#2E8B57\",\r\n    darkslategray: \"#2F4F4F\",\r\n    darkslategrey: \"#2F4F4F\",\r\n    limegreen: \"#32CD32\",\r\n    mediumseagreen: \"#3CB371\",\r\n    turquoise: \"#40E0D0\",\r\n    royalblue: \"#4169E1\",\r\n    steelblue: \"#4682B4\",\r\n    darkslateblue: \"#483D8B\",\r\n    mediumturquoise: \"#48D1CC\",\r\n    indigo: \"#4B0082\",\r\n    darkolivegreen: \"#556B2F\",\r\n    cadetblue: \"#5F9EA0\",\r\n    cornflowerblue: \"#6495ED\",\r\n    rebeccapurple: \"#663399\",\r\n    mediumaquamarine: \"#66CDAA\",\r\n    dimgray: \"#696969\",\r\n    dimgrey: \"#696969\",\r\n    slateblue: \"#6A5ACD\",\r\n    olivedrab: \"#6B8E23\",\r\n    slategray: \"#708090\",\r\n    slategrey: \"#708090\",\r\n    lightslategray: \"#778899\",\r\n    lightslategrey: \"#778899\",\r\n    mediumslateblue: \"#7B68EE\",\r\n    lawngreen: \"#7CFC00\",\r\n    chartreuse: \"#7FFF00\",\r\n    aquamarine: \"#7FFFD4\",\r\n    skyblue: \"#87CEEB\",\r\n    lightskyblue: \"#87CEFA\",\r\n    blueviolet: \"#8A2BE2\",\r\n    darkred: \"#8B0000\",\r\n    darkmagenta: \"#8B008B\",\r\n    saddlebrown: \"#8B4513\",\r\n    darkseagreen: \"#8FBC8F\",\r\n    lightgreen: \"#90EE90\",\r\n    mediumpurple: \"#9370DB\",\r\n    darkviolet: \"#9400D3\",\r\n    palegreen: \"#98FB98\",\r\n    darkorchid: \"#9932CC\",\r\n    yellowgreen: \"#9ACD32\",\r\n    sienna: \"#A0522D\",\r\n    brown: \"#A52A2A\",\r\n    darkgray: \"#A9A9A9\",\r\n    darkgrey: \"#A9A9A9\",\r\n    lightblue: \"#ADD8E6\",\r\n    greenyellow: \"#ADFF2F\",\r\n    paleturquoise: \"#AFEEEE\",\r\n    lightsteelblue: \"#B0C4DE\",\r\n    powderblue: \"#B0E0E6\",\r\n    firebrick: \"#B22222\",\r\n    darkgoldenrod: \"#B8860B\",\r\n    mediumorchid: \"#BA55D3\",\r\n    rosybrown: \"#BC8F8F\",\r\n    darkkhaki: \"#BDB76B\",\r\n    mediumvioletred: \"#C71585\",\r\n    indianred: \"#CD5C5C\",\r\n    peru: \"#CD853F\",\r\n    chocolate: \"#D2691E\",\r\n    tan: \"#D2B48C\",\r\n    lightgray: \"#D3D3D3\",\r\n    lightgrey: \"#D3D3D3\",\r\n    thistle: \"#D8BFD8\",\r\n    orchid: \"#DA70D6\",\r\n    goldenrod: \"#DAA520\",\r\n    palevioletred: \"#DB7093\",\r\n    crimson: \"#DC143C\",\r\n    gainsboro: \"#DCDCDC\",\r\n    plum: \"#DDA0DD\",\r\n    burlywood: \"#DEB887\",\r\n    lightcyan: \"#E0FFFF\",\r\n    lavender: \"#E6E6FA\",\r\n    darksalmon: \"#E9967A\",\r\n    violet: \"#EE82EE\",\r\n    palegoldenrod: \"#EEE8AA\",\r\n    lightcoral: \"#F08080\",\r\n    khaki: \"#F0E68C\",\r\n    aliceblue: \"#F0F8FF\",\r\n    honeydew: \"#F0FFF0\",\r\n    azure: \"#F0FFFF\",\r\n    sandybrown: \"#F4A460\",\r\n    wheat: \"#F5DEB3\",\r\n    beige: \"#F5F5DC\",\r\n    whitesmoke: \"#F5F5F5\",\r\n    mintcream: \"#F5FFFA\",\r\n    ghostwhite: \"#F8F8FF\",\r\n    salmon: \"#FA8072\",\r\n    antiquewhite: \"#FAEBD7\",\r\n    linen: \"#FAF0E6\",\r\n    lightgoldenrodyellow: \"#FAFAD2\",\r\n    oldlace: \"#FDF5E6\",\r\n    magenta: \"#FF00FF\",\r\n    deeppink: \"#FF1493\",\r\n    orangered: \"#FF4500\",\r\n    tomato: \"#FF6347\",\r\n    hotpink: \"#FF69B4\",\r\n    coral: \"#FF7F50\",\r\n    darkorange: \"#FF8C00\",\r\n    lightsalmon: \"#FFA07A\",\r\n    orange: \"#FFA500\",\r\n    lightpink: \"#FFB6C1\",\r\n    pink: \"#FFC0CB\",\r\n    gold: \"#FFD700\",\r\n    peachpuff: \"#FFDAB9\",\r\n    navajowhite: \"#FFDEAD\",\r\n    moccasin: \"#FFE4B5\",\r\n    bisque: \"#FFE4C4\",\r\n    mistyrose: \"#FFE4E1\",\r\n    blanchedalmond: \"#FFEBCD\",\r\n    papayawhip: \"#FFEFD5\",\r\n    lavenderblush: \"#FFF0F5\",\r\n    seashell: \"#FFF5EE\",\r\n    cornsilk: \"#FFF8DC\",\r\n    lemonchiffon: \"#FFFACD\",\r\n    floralwhite: \"#FFFAF0\",\r\n    snow: \"#FFFAFA\",\r\n    lightyellow: \"#FFFFE0\",\r\n    ivory: \"#FFFFF0\",\r\n};\r\n", "\"use strict\";\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validateGraph = exports.canUse32BitsIndices = exports.extractPixel = exports.getMatrixImpact = exports.matrixFromCamera = exports.getCorrectionRatio = exports.floatColor = exports.floatArrayColor = exports.parseColor = exports.zIndexOrdering = exports.createNormalizationFunction = exports.graphExtent = exports.getPixelRatio = exports.createElement = exports.cancelFrame = exports.requestFrame = exports.assignDeep = exports.assign = exports.isPlainObject = void 0;\r\nvar is_graph_1 = __importDefault(require(\"graphology-utils/is-graph\"));\r\nvar matrices_1 = require(\"./matrices\");\r\nvar data_1 = require(\"./data\");\r\n/**\r\n * Checks whether the given value is a plain object.\r\n *\r\n * @param  {mixed}   value - Target value.\r\n * @return {boolean}\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\r\nfunction isPlainObject(value) {\r\n    return typeof value === \"object\" && value !== null && value.constructor === Object;\r\n}\r\nexports.isPlainObject = isPlainObject;\r\n/**\r\n * Helper to use Object.assign with more than two objects.\r\n *\r\n * @param  {object} target       - First object.\r\n * @param  {object} [...objects] - Objects to merge.\r\n * @return {object}\r\n */\r\nfunction assign(target) {\r\n    var objects = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        objects[_i - 1] = arguments[_i];\r\n    }\r\n    target = target || {};\r\n    for (var i = 0, l = objects.length; i < l; i++) {\r\n        var o = objects[i];\r\n        if (!o)\r\n            continue;\r\n        Object.assign(target, o);\r\n    }\r\n    return target;\r\n}\r\nexports.assign = assign;\r\n/**\r\n * Very simple recursive Object.assign-like function.\r\n *\r\n * @param  {object} target       - First object.\r\n * @param  {object} [...objects] - Objects to merge.\r\n * @return {object}\r\n */\r\nfunction assignDeep(target) {\r\n    var objects = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        objects[_i - 1] = arguments[_i];\r\n    }\r\n    target = target || {};\r\n    for (var i = 0, l = objects.length; i < l; i++) {\r\n        var o = objects[i];\r\n        if (!o)\r\n            continue;\r\n        for (var k in o) {\r\n            if (isPlainObject(o[k])) {\r\n                target[k] = assignDeep(target[k], o[k]);\r\n            }\r\n            else {\r\n                target[k] = o[k];\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexports.assignDeep = assignDeep;\r\n/**\r\n * Just some dirty trick to make requestAnimationFrame and cancelAnimationFrame \"work\" in Node.js, for unit tests:\r\n */\r\nexports.requestFrame = typeof requestAnimationFrame !== \"undefined\"\r\n    ? function (callback) { return requestAnimationFrame(callback); }\r\n    : function (callback) { return setTimeout(callback, 0); };\r\nexports.cancelFrame = typeof cancelAnimationFrame !== \"undefined\"\r\n    ? function (requestID) { return cancelAnimationFrame(requestID); }\r\n    : function (requestID) { return clearTimeout(requestID); };\r\n/**\r\n * Function used to create DOM elements easily.\r\n *\r\n * @param  {string} tag        - Tag name of the element to create.\r\n * @param  {object} style      - Styles map.\r\n * @param  {object} attributes - Attributes map.\r\n * @return {HTMLElement}\r\n */\r\nfunction createElement(tag, style, attributes) {\r\n    var element = document.createElement(tag);\r\n    if (style) {\r\n        for (var k in style) {\r\n            element.style[k] = style[k];\r\n        }\r\n    }\r\n    if (attributes) {\r\n        for (var k in attributes) {\r\n            element.setAttribute(k, attributes[k]);\r\n        }\r\n    }\r\n    return element;\r\n}\r\nexports.createElement = createElement;\r\n/**\r\n * Function returning the browser's pixel ratio.\r\n *\r\n * @return {number}\r\n */\r\nfunction getPixelRatio() {\r\n    if (typeof window.devicePixelRatio !== \"undefined\")\r\n        return window.devicePixelRatio;\r\n    return 1;\r\n}\r\nexports.getPixelRatio = getPixelRatio;\r\n/**\r\n * Function returning the graph's node extent in x & y.\r\n *\r\n * @param  {Graph}\r\n * @return {object}\r\n */\r\nfunction graphExtent(graph) {\r\n    if (!graph.order)\r\n        return { x: [0, 1], y: [0, 1] };\r\n    var xMin = Infinity;\r\n    var xMax = -Infinity;\r\n    var yMin = Infinity;\r\n    var yMax = -Infinity;\r\n    graph.forEachNode(function (_, attr) {\r\n        var x = attr.x, y = attr.y;\r\n        if (x < xMin)\r\n            xMin = x;\r\n        if (x > xMax)\r\n            xMax = x;\r\n        if (y < yMin)\r\n            yMin = y;\r\n        if (y > yMax)\r\n            yMax = y;\r\n    });\r\n    return { x: [xMin, xMax], y: [yMin, yMax] };\r\n}\r\nexports.graphExtent = graphExtent;\r\nfunction createNormalizationFunction(extent) {\r\n    var _a = __read(extent.x, 2), minX = _a[0], maxX = _a[1], _b = __read(extent.y, 2), minY = _b[0], maxY = _b[1];\r\n    var ratio = Math.max(maxX - minX, maxY - minY), dX = (maxX + minX) / 2, dY = (maxY + minY) / 2;\r\n    if (ratio === 0 || Math.abs(ratio) === Infinity || isNaN(ratio))\r\n        ratio = 1;\r\n    if (isNaN(dX))\r\n        dX = 0;\r\n    if (isNaN(dY))\r\n        dY = 0;\r\n    var fn = function (data) {\r\n        return {\r\n            x: 0.5 + (data.x - dX) / ratio,\r\n            y: 0.5 + (data.y - dY) / ratio,\r\n        };\r\n    };\r\n    // TODO: possibility to apply this in batch over array of indices\r\n    fn.applyTo = function (data) {\r\n        data.x = 0.5 + (data.x - dX) / ratio;\r\n        data.y = 0.5 + (data.y - dY) / ratio;\r\n    };\r\n    fn.inverse = function (data) {\r\n        return {\r\n            x: dX + ratio * (data.x - 0.5),\r\n            y: dY + ratio * (data.y - 0.5),\r\n        };\r\n    };\r\n    fn.ratio = ratio;\r\n    return fn;\r\n}\r\nexports.createNormalizationFunction = createNormalizationFunction;\r\n/**\r\n * Function ordering the given elements in reverse z-order so they drawn\r\n * the correct way.\r\n *\r\n * @param  {number}   extent   - [min, max] z values.\r\n * @param  {function} getter   - Z attribute getter function.\r\n * @param  {array}    elements - The array to sort.\r\n * @return {array} - The sorted array.\r\n */\r\nfunction zIndexOrdering(extent, getter, elements) {\r\n    // If k is > n, we'll use a standard sort\r\n    return elements.sort(function (a, b) {\r\n        var zA = getter(a) || 0, zB = getter(b) || 0;\r\n        if (zA < zB)\r\n            return -1;\r\n        if (zA > zB)\r\n            return 1;\r\n        return 0;\r\n    });\r\n    // TODO: counting sort optimization\r\n}\r\nexports.zIndexOrdering = zIndexOrdering;\r\n/**\r\n * WebGL utils\r\n * ===========\r\n */\r\n/**\r\n * Memoized function returning a float-encoded color from various string\r\n * formats describing colors.\r\n */\r\nvar INT8 = new Int8Array(4);\r\nvar INT32 = new Int32Array(INT8.buffer, 0, 1);\r\nvar FLOAT32 = new Float32Array(INT8.buffer, 0, 1);\r\nvar RGBA_TEST_REGEX = /^\\s*rgba?\\s*\\(/;\r\nvar RGBA_EXTRACT_REGEX = /^\\s*rgba?\\s*\\(\\s*([0-9]*)\\s*,\\s*([0-9]*)\\s*,\\s*([0-9]*)(?:\\s*,\\s*(.*)?)?\\)\\s*$/;\r\nfunction parseColor(val) {\r\n    var r = 0; // byte\r\n    var g = 0; // byte\r\n    var b = 0; // byte\r\n    var a = 1; // float\r\n    // Handling hexadecimal notation\r\n    if (val[0] === \"#\") {\r\n        if (val.length === 4) {\r\n            r = parseInt(val.charAt(1) + val.charAt(1), 16);\r\n            g = parseInt(val.charAt(2) + val.charAt(2), 16);\r\n            b = parseInt(val.charAt(3) + val.charAt(3), 16);\r\n        }\r\n        else {\r\n            r = parseInt(val.charAt(1) + val.charAt(2), 16);\r\n            g = parseInt(val.charAt(3) + val.charAt(4), 16);\r\n            b = parseInt(val.charAt(5) + val.charAt(6), 16);\r\n        }\r\n        if (val.length === 9) {\r\n            a = parseInt(val.charAt(7) + val.charAt(8), 16) / 255;\r\n        }\r\n    }\r\n    // Handling rgb notation\r\n    else if (RGBA_TEST_REGEX.test(val)) {\r\n        var match = val.match(RGBA_EXTRACT_REGEX);\r\n        if (match) {\r\n            r = +match[1];\r\n            g = +match[2];\r\n            b = +match[3];\r\n            if (match[4])\r\n                a = +match[4];\r\n        }\r\n    }\r\n    return { r: r, g: g, b: b, a: a };\r\n}\r\nexports.parseColor = parseColor;\r\nvar FLOAT_COLOR_CACHE = {};\r\nfor (var htmlColor in data_1.HTML_COLORS) {\r\n    FLOAT_COLOR_CACHE[htmlColor] = floatColor(data_1.HTML_COLORS[htmlColor]);\r\n    // Replicating cache for hex values for free\r\n    FLOAT_COLOR_CACHE[data_1.HTML_COLORS[htmlColor]] = FLOAT_COLOR_CACHE[htmlColor];\r\n}\r\nfunction floatArrayColor(val) {\r\n    val = data_1.HTML_COLORS[val] || val;\r\n    // NOTE: this variant is not cached because it is mostly used for uniforms\r\n    var _a = parseColor(val), r = _a.r, g = _a.g, b = _a.b, a = _a.a;\r\n    return new Float32Array([r / 255, g / 255, b / 255, a]);\r\n}\r\nexports.floatArrayColor = floatArrayColor;\r\nfunction floatColor(val) {\r\n    // If the color is already computed, we yield it\r\n    if (typeof FLOAT_COLOR_CACHE[val] !== \"undefined\")\r\n        return FLOAT_COLOR_CACHE[val];\r\n    var parsed = parseColor(val);\r\n    var r = parsed.r, g = parsed.g, b = parsed.b;\r\n    var a = parsed.a;\r\n    a = (a * 255) | 0;\r\n    INT32[0] = ((a << 24) | (b << 16) | (g << 8) | r) & 0xfeffffff;\r\n    var color = FLOAT32[0];\r\n    FLOAT_COLOR_CACHE[val] = color;\r\n    return color;\r\n}\r\nexports.floatColor = floatColor;\r\n/**\r\n * In sigma, the graph is normalized into a [0, 1], [0, 1] square, before being given to the various renderers. This\r\n * helps dealing with quadtree in particular.\r\n * But at some point, we need to rescale it so that it takes the best place in the screen, ie. we always want to see two\r\n * nodes \"touching\" opposite sides of the graph, with the camera being at its default state.\r\n *\r\n * This function determines this ratio.\r\n */\r\nfunction getCorrectionRatio(viewportDimensions, graphDimensions) {\r\n    var viewportRatio = viewportDimensions.height / viewportDimensions.width;\r\n    var graphRatio = graphDimensions.height / graphDimensions.width;\r\n    // If the stage and the graphs are in different directions (such as the graph being wider that tall while the stage\r\n    // is taller than wide), we can stop here to have indeed nodes touching opposite sides:\r\n    if ((viewportRatio < 1 && graphRatio > 1) || (viewportRatio > 1 && graphRatio < 1)) {\r\n        return 1;\r\n    }\r\n    // Else, we need to fit the graph inside the stage:\r\n    // 1. If the graph is \"squarer\" (ie. with a ratio closer to 1), we need to make the largest sides touch;\r\n    // 2. If the stage is \"squarer\", we need to make the smallest sides touch.\r\n    return Math.min(Math.max(graphRatio, 1 / graphRatio), Math.max(1 / viewportRatio, viewportRatio));\r\n}\r\nexports.getCorrectionRatio = getCorrectionRatio;\r\n/**\r\n * Function returning a matrix from the current state of the camera.\r\n */\r\n// TODO: it's possible to optimize this drastically!\r\nfunction matrixFromCamera(state, viewportDimensions, graphDimensions, padding, inverse) {\r\n    var angle = state.angle, ratio = state.ratio, x = state.x, y = state.y;\r\n    var width = viewportDimensions.width, height = viewportDimensions.height;\r\n    var matrix = (0, matrices_1.identity)();\r\n    var smallestDimension = Math.min(width, height) - 2 * padding;\r\n    var correctionRatio = getCorrectionRatio(viewportDimensions, graphDimensions);\r\n    if (!inverse) {\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), 2 * (smallestDimension / width) * correctionRatio, 2 * (smallestDimension / height) * correctionRatio));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.rotate)((0, matrices_1.identity)(), -angle));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), 1 / ratio));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.translate)((0, matrices_1.identity)(), -x, -y));\r\n    }\r\n    else {\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.translate)((0, matrices_1.identity)(), x, y));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), ratio));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.rotate)((0, matrices_1.identity)(), angle));\r\n        (0, matrices_1.multiply)(matrix, (0, matrices_1.scale)((0, matrices_1.identity)(), width / smallestDimension / 2 / correctionRatio, height / smallestDimension / 2 / correctionRatio));\r\n    }\r\n    return matrix;\r\n}\r\nexports.matrixFromCamera = matrixFromCamera;\r\n/**\r\n * All these transformations we apply on the matrix to get it rescale the graph\r\n * as we want make it very hard to get pixel-perfect distances in WebGL. This\r\n * function returns a factor that properly cancels the matrix effect on lengths.\r\n *\r\n * [jacomyal]\r\n * To be fully honest, I can't really explain happens here... I notice that the\r\n * following ratio works (ie. it correctly compensates the matrix impact on all\r\n * camera states I could try):\r\n * > `R = size(V) / size(M * V) / W`\r\n * as long as `M * V` is in the direction of W (ie. parallel to (Ox)). It works\r\n * as well with H and a vector that transforms into something parallel to (Oy).\r\n *\r\n * Also, note that we use `angle` and not `-angle` (that would seem logical,\r\n * since we want to anticipate the rotation), because of the fact that in WebGL,\r\n * the image is vertically swapped.\r\n */\r\nfunction getMatrixImpact(matrix, cameraState, viewportDimensions) {\r\n    var _a = (0, matrices_1.multiplyVec2)(matrix, { x: Math.cos(cameraState.angle), y: Math.sin(cameraState.angle) }, 0), x = _a.x, y = _a.y;\r\n    return 1 / Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) / viewportDimensions.width;\r\n}\r\nexports.getMatrixImpact = getMatrixImpact;\r\n/**\r\n * Function extracting the color at the given pixel.\r\n */\r\nfunction extractPixel(gl, x, y, array) {\r\n    var data = array || new Uint8Array(4);\r\n    gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, data);\r\n    return data;\r\n}\r\nexports.extractPixel = extractPixel;\r\n/**\r\n * Function used to know whether given webgl context can use 32 bits indices.\r\n */\r\nfunction canUse32BitsIndices(gl) {\r\n    var webgl2 = typeof WebGL2RenderingContext !== \"undefined\" && gl instanceof WebGL2RenderingContext;\r\n    return webgl2 || !!gl.getExtension(\"OES_element_index_uint\");\r\n}\r\nexports.canUse32BitsIndices = canUse32BitsIndices;\r\n/**\r\n * Check if the graph variable is a valid graph, and if sigma can render it.\r\n */\r\nfunction validateGraph(graph) {\r\n    // check if it's a valid graphology instance\r\n    if (!(0, is_graph_1.default)(graph))\r\n        throw new Error(\"Sigma: invalid graph instance.\");\r\n    // check if nodes have x/y attributes\r\n    graph.forEachNode(function (key, attributes) {\r\n        if (!Number.isFinite(attributes.x) || !Number.isFinite(attributes.y)) {\r\n            throw new Error(\"Sigma: Coordinates of node \".concat(key, \" are invalid. A node must have a numeric 'x' and 'y' attribute.\"));\r\n        }\r\n    });\r\n}\r\nexports.validateGraph = validateGraph;\r\n", "\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.cubicInOut = exports.cubicOut = exports.cubicIn = exports.quadraticInOut = exports.quadraticOut = exports.quadraticIn = exports.linear = void 0;\r\n/**\r\n * Sigma.js Easings\r\n * =================\r\n *\r\n * Handy collection of easing functions.\r\n * @module\r\n */\r\nvar linear = function (k) { return k; };\r\nexports.linear = linear;\r\nvar quadraticIn = function (k) { return k * k; };\r\nexports.quadraticIn = quadraticIn;\r\nvar quadraticOut = function (k) { return k * (2 - k); };\r\nexports.quadraticOut = quadraticOut;\r\nvar quadraticInOut = function (k) {\r\n    if ((k *= 2) < 1)\r\n        return 0.5 * k * k;\r\n    return -0.5 * (--k * (k - 2) - 1);\r\n};\r\nexports.quadraticInOut = quadraticInOut;\r\nvar cubicIn = function (k) { return k * k * k; };\r\nexports.cubicIn = cubicIn;\r\nvar cubicOut = function (k) { return --k * k * k + 1; };\r\nexports.cubicOut = cubicOut;\r\nvar cubicInOut = function (k) {\r\n    if ((k *= 2) < 1)\r\n        return 0.5 * k * k * k;\r\n    return 0.5 * ((k -= 2) * k * k + 2);\r\n};\r\nexports.cubicInOut = cubicInOut;\r\nvar easings = {\r\n    linear: exports.linear,\r\n    quadraticIn: exports.quadraticIn,\r\n    quadraticOut: exports.quadraticOut,\r\n    quadraticInOut: exports.quadraticInOut,\r\n    cubicIn: exports.cubicIn,\r\n    cubicOut: exports.cubicOut,\r\n    cubicInOut: exports.cubicInOut,\r\n};\r\nexports.default = easings;\r\n", "\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.animateNodes = exports.ANIMATE_DEFAULTS = void 0;\r\nvar index_1 = require(\"./index\");\r\nvar easings_1 = __importDefault(require(\"./easings\"));\r\nexports.ANIMATE_DEFAULTS = {\r\n    easing: \"quadraticInOut\",\r\n    duration: 150,\r\n};\r\n/**\r\n * Function used to animate the nodes.\r\n */\r\nfunction animateNodes(graph, targets, opts, callback) {\r\n    var options = Object.assign({}, exports.ANIMATE_DEFAULTS, opts);\r\n    var easing = typeof options.easing === \"function\" ? options.easing : easings_1.default[options.easing];\r\n    var start = Date.now();\r\n    var startPositions = {};\r\n    for (var node in targets) {\r\n        var attrs = targets[node];\r\n        startPositions[node] = {};\r\n        for (var k in attrs)\r\n            startPositions[node][k] = graph.getNodeAttribute(node, k);\r\n    }\r\n    var frame = null;\r\n    var step = function () {\r\n        frame = null;\r\n        var p = (Date.now() - start) / options.duration;\r\n        if (p >= 1) {\r\n            // Animation is done\r\n            for (var node in targets) {\r\n                var attrs = targets[node];\r\n                // We use given values to avoid precision issues and for convenience\r\n                for (var k in attrs)\r\n                    graph.setNodeAttribute(node, k, attrs[k]);\r\n            }\r\n            if (typeof callback === \"function\")\r\n                callback();\r\n            return;\r\n        }\r\n        p = easing(p);\r\n        for (var node in targets) {\r\n            var attrs = targets[node];\r\n            var s = startPositions[node];\r\n            for (var k in attrs)\r\n                graph.setNodeAttribute(node, k, attrs[k] * p + s[k] * (1 - p));\r\n        }\r\n        frame = (0, index_1.requestFrame)(step);\r\n    };\r\n    step();\r\n    return function () {\r\n        if (frame)\r\n            (0, index_1.cancelFrame)(frame);\r\n    };\r\n}\r\nexports.animateNodes = animateNodes;\r\n"],
  "mappings": "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",
  "names": ["node", "attrs", "k"]
}
